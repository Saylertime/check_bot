from loader import bot
from states.overall import OverallState
from utils.logger import logger
from pg_maker import new_post
from handlers.default_handlers.free import show_variants
import os
import time
import threading
from keyboards.reply.calendar import show_calendar
from keyboards.reply.create_markup import create_markup
from telebot.types import InputMediaPhoto


@bot.message_handler(commands=['add_post'])
def add_post(message):
    bot.delete_state(message.from_user.id)
    logger.warning(f'{message.from_user.username} ‚Äî –∫–æ–º–∞–Ω–¥–∞ ADD_POST')
    bot.set_state(message.from_user.id, state=OverallState.add_post)
    with bot.retrieve_data(message.from_user.id) as data:
        data['command'] = 'add_post'
    buttons = [('–¢–µ–ª—å-–ê–≤–∏–≤ –∏ –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–∏', '–¢–µ–ª—å-–ê–≤–∏–≤',),
               ('–•–∞–π—Ñ–∞', '–•–∞–π—Ñ–∞')]
    markup = create_markup(buttons)
    bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥: ", reply_markup=markup)


@bot.message_handler(state=OverallState.type)
def type_of_sublet(message):
    with bot.retrieve_data(message.from_user.id) as data:
        data['command'] = 'add_post'
    buttons = [('–ö–≤–∞—Ä—Ç–∏—Ä–∞', '–¢–∏–ø –ö–≤–∞—Ä—Ç–∏—Ä–∞',),
               ('–ö–æ–º–Ω–∞—Ç–∞', '–¢–∏–ø –ö–æ–º–Ω–∞—Ç–∞')]
    markup = create_markup(buttons)
    bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–∞–±–ª–µ—Ç–∞: ", reply_markup=markup)


# –ö–ù–û–ü–û–ß–ö–ò
@bot.callback_query_handler(func=lambda call: call.data in ['–•–∞–π—Ñ–∞', '–¢–µ–ª—å-–ê–≤–∏–≤'])
def city_callback(call):
    with bot.retrieve_data(call.from_user.id) as data:
        data['city'] = call.data
        command = data['command']
    if command == 'add_post':
        bot.set_state(call.from_user.id, OverallState.type)
        type_of_sublet(call)
    elif command == 'free':
        bot.set_state(call.from_user.id, state=OverallState.free_show)
        show_variants(call)



@bot.callback_query_handler(func=lambda call: call.data.startswith('–¢–∏–ø'))
def type_of_sublet_callback(call):
    with bot.retrieve_data(call.from_user.id) as data:
        data['type'] = call.data.split()[1]
    bot.set_state(call.from_user.id, OverallState.address)
    address(call)

@bot.message_handler(state=OverallState.address)
def address(message):
    bot.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å')
    bot.set_state(message.from_user.id, OverallState.description)


@bot.message_handler(state=OverallState.description)
def description(message):
    with bot.retrieve_data(message.from_user.id) as data:
        data['address'] = message.text
    bot.send_message(message.from_user.id, '–û–ø–∏—à–∏—Ç–µ —Å–∞–±–ª–µ—Ç. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ –¥–æ–±–∞–≤–∏—Ç—å —ç–º–æ–¥–∑–∏ üè†')
    bot.set_state(message.from_user.id, OverallState.move_in)


@bot.message_handler(state=OverallState.move_in)
def move_in(message):
    with bot.retrieve_data(message.from_user.id) as data:
        data['description'] = message.text
    show_calendar(bot, message.from_user.id)

first_photo_time = {}


@bot.message_handler(content_types=['photo'], state=OverallState.photos)
def photos(message):
    if message.from_user.id not in first_photo_time:
        first_photo_time[message.from_user.id] = time.time()
        threading.Timer(5, final, args=(message,)).start()
    timestamp = int(time.time() * 1000)
    if message.content_type == 'photo':
        photo = message.photo[-1]
    # elif message.content_type == 'document':
    #     photo = message.document
    else:
        bot.send_message('–ù—É–∂–Ω—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏')

    file_info = bot.get_file(photo.file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    filename = f'photo_{message.from_user.id}_{message.date}_{timestamp}.jpg'
    filepath = os.path.join('media', filename)
    with open(filepath, 'wb') as new_file:
        new_file.write(downloaded_file)

    with bot.retrieve_data(message.from_user.id) as data:
        data['photos'].append(filepath)


def final(message):
    photo_variables = {}
    first_photo_time.pop(message.from_user.id, None)

    with bot.retrieve_data(message.from_user.id) as data:
        for i, photo_path in enumerate(data['photos'][:8]):
            photo_variables[f'photo{i + 1}'] = photo_path

        new_post(username=message.from_user.username,
                 city=data['city'],
                 address=data['address'],
                 type=data['type'],
                 description=data['description'],
                 date_in=data["date_in"],
                 date_out=data["date_out"],
                 **photo_variables)

    bot.delete_state(message.from_user.id)

    buttons = [('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è', '–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'),
               ('‚¨á‚¨á‚¨á –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é ‚¨á‚¨á‚¨á', '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')]
    markup = create_markup(buttons)
    bot.send_message(message.from_user.id, '–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!!', reply_markup=markup)


@bot.message_handler(func=lambda message: True, state=OverallState.move_in)
def handle_text_in_move_in_state(message):
    bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ.")

@bot.message_handler(func=lambda message: True, state=OverallState.photos)
def handle_text_messages(message):
    bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.")
